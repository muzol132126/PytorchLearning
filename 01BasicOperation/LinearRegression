import torch
import torch.nn as nn
import numpy as np

class LinearRegressionModel(nn.Module):
    def __init__(self, input_dim, output_dim):
        super(LinearRegressionModel, self).__init__()
        self.linear = nn.Linear(input_dim, output_dim)

    def forward(self, x):
        out = self.linear(x)
        return out



x_values = [i for i in range(11)]
x_train = np.array(x_values, dtype = np.float32)
x_train = x_train.reshape(-1,1)

y_values = [2*i + 1 for i in range(11)]
y_train = np.array(y_values, dtype = np.float32)
y_train = y_train.reshape(-1,1)

input_dim = 1
output_dim = 1

model = LinearRegressionModel(input_dim, output_dim)

# device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
# print(device)
# model.to(device)


epoches = 1000
learning_rate = 0.01
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate) # 梯度下降法
criterion = nn.MSELoss()


for epoch in range(epoches):
    epoch += 1
    inputs = torch.from_numpy(x_train)
    labels = torch.from_numpy(y_train)

    # 梯度清零
    optimizer.zero_grad()
    # 前向传播
    outputs = model(inputs)
    # 计算损失
    loss = criterion(outputs, labels)
    # 反向传播
    loss.backward()
    # 更新权重参数
    optimizer.step()

    # if epoch % 50 == 0:
    #     print(f'epoch: {epoch}, loss: {loss.item()}')


predicted = model(torch.from_numpy(x_train).requires_grad_()).data.numpy()

print(predicted)

# 模型保存
torch.save(model.state_dict(), "model.pkl")
# 加载模型
model.load_state_dict(torch.load("model.pkl"))